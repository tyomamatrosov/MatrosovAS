/*
 * This file is generated by jOOQ.
 */
package jooq;


import jooq.tables.Client;
import jooq.tables.Company;
import jooq.tables.Databasechangeloglock;
import jooq.tables.Interactions;
import jooq.tables.records.ClientRecord;
import jooq.tables.records.CompanyRecord;
import jooq.tables.records.DatabasechangeloglockRecord;
import jooq.tables.records.InteractionsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ClientRecord> CLIENT_COMPANY_KEY = Internal.createUniqueKey(Client.CLIENT, DSL.name("client_company_key"), new TableField[] { Client.CLIENT.COMPANY }, true);
    public static final UniqueKey<ClientRecord> CLIENT_EMAIL_KEY = Internal.createUniqueKey(Client.CLIENT, DSL.name("client_email_key"), new TableField[] { Client.CLIENT.EMAIL }, true);
    public static final UniqueKey<ClientRecord> CLIENT_PKEY = Internal.createUniqueKey(Client.CLIENT, DSL.name("client_pkey"), new TableField[] { Client.CLIENT.CLIENT_ID }, true);
    public static final UniqueKey<CompanyRecord> COMPANY_COMPANY_NAME_KEY = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_company_name_key"), new TableField[] { Company.COMPANY.COMPANY_NAME }, true);
    public static final UniqueKey<CompanyRecord> COMPANY_EMAIL_KEY = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_email_key"), new TableField[] { Company.COMPANY.EMAIL }, true);
    public static final UniqueKey<CompanyRecord> COMPANY_PKEY = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_pkey"), new TableField[] { Company.COMPANY.COMPANY_ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<InteractionsRecord> INTERACTIONS_PKEY = Internal.createUniqueKey(Interactions.INTERACTIONS, DSL.name("interactions_pkey"), new TableField[] { Interactions.INTERACTIONS.INTERACTIONS_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ClientRecord, CompanyRecord> CLIENT__CLIENT_COMPANY_FKEY = Internal.createForeignKey(Client.CLIENT, DSL.name("client_company_fkey"), new TableField[] { Client.CLIENT.COMPANY }, Keys.COMPANY_PKEY, new TableField[] { Company.COMPANY.COMPANY_ID }, true);
    public static final ForeignKey<InteractionsRecord, ClientRecord> INTERACTIONS__INTERACTIONS_CLIENT_ID_FKEY = Internal.createForeignKey(Interactions.INTERACTIONS, DSL.name("interactions_client_id_fkey"), new TableField[] { Interactions.INTERACTIONS.CLIENT_ID }, Keys.CLIENT_PKEY, new TableField[] { Client.CLIENT.CLIENT_ID }, true);
}
