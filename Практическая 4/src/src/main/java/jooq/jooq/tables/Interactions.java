/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Client.ClientPath;
import jooq.tables.records.InteractionsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Interactions extends TableImpl<InteractionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.interactions</code>
     */
    public static final Interactions INTERACTIONS = new Interactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InteractionsRecord> getRecordType() {
        return InteractionsRecord.class;
    }

    /**
     * The column <code>public.interactions.interactions_id</code>.
     */
    public final TableField<InteractionsRecord, Long> INTERACTIONS_ID = createField(DSL.name("interactions_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.interactions.client_id</code>.
     */
    public final TableField<InteractionsRecord, Long> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.interactions.type_interactions</code>.
     */
    public final TableField<InteractionsRecord, String> TYPE_INTERACTIONS = createField(DSL.name("type_interactions"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.interactions.date</code>.
     */
    public final TableField<InteractionsRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.interactions.notes</code>.
     */
    public final TableField<InteractionsRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "");

    private Interactions(Name alias, Table<InteractionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Interactions(Name alias, Table<InteractionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.interactions</code> table reference
     */
    public Interactions(String alias) {
        this(DSL.name(alias), INTERACTIONS);
    }

    /**
     * Create an aliased <code>public.interactions</code> table reference
     */
    public Interactions(Name alias) {
        this(alias, INTERACTIONS);
    }

    /**
     * Create a <code>public.interactions</code> table reference
     */
    public Interactions() {
        this(DSL.name("interactions"), null);
    }

    public <O extends Record> Interactions(Table<O> path, ForeignKey<O, InteractionsRecord> childPath, InverseForeignKey<O, InteractionsRecord> parentPath) {
        super(path, childPath, parentPath, INTERACTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InteractionsPath extends Interactions implements Path<InteractionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> InteractionsPath(Table<O> path, ForeignKey<O, InteractionsRecord> childPath, InverseForeignKey<O, InteractionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InteractionsPath(Name alias, Table<InteractionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InteractionsPath as(String alias) {
            return new InteractionsPath(DSL.name(alias), this);
        }

        @Override
        public InteractionsPath as(Name alias) {
            return new InteractionsPath(alias, this);
        }

        @Override
        public InteractionsPath as(Table<?> alias) {
            return new InteractionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InteractionsRecord, Long> getIdentity() {
        return (Identity<InteractionsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InteractionsRecord> getPrimaryKey() {
        return Keys.INTERACTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<InteractionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INTERACTIONS__INTERACTIONS_CLIENT_ID_FKEY);
    }

    private transient ClientPath _client;

    /**
     * Get the implicit join path to the <code>public.client</code> table.
     */
    public ClientPath client() {
        if (_client == null)
            _client = new ClientPath(this, Keys.INTERACTIONS__INTERACTIONS_CLIENT_ID_FKEY, null);

        return _client;
    }

    @Override
    public Interactions as(String alias) {
        return new Interactions(DSL.name(alias), this);
    }

    @Override
    public Interactions as(Name alias) {
        return new Interactions(alias, this);
    }

    @Override
    public Interactions as(Table<?> alias) {
        return new Interactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Interactions rename(String name) {
        return new Interactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Interactions rename(Name name) {
        return new Interactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Interactions rename(Table<?> name) {
        return new Interactions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Interactions where(Condition condition) {
        return new Interactions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Interactions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Interactions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Interactions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Interactions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Interactions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Interactions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Interactions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Interactions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Interactions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, LocalDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
